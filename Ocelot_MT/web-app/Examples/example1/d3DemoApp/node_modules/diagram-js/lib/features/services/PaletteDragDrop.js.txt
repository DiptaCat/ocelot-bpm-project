'use strict';

var Diagram = require('../../Diagram'),
    Elements = require('../../util/Elements');

var _ = require('lodash');


/**
 * @namespace djs
 */

/**
 * @class
 *
 * A service that allow to drop an element via drag (from palette)
 * to the canvas (drop).
 */
function PaletteDragDrop(canvas, events, elementRegistry) {

  var dragInProgress = false;

  events.on('standard.palette.init', function(event) {
    init();
  });

  function init() {
    // mouseenter does not work as chrome doesn't fire
    // the event if left button is pressed

    var root = canvas.getRoot();
    root.node.addEventListener('mousemove', paletteMoveListener);
    root.node.addEventListener('mouseup', canvasOnMouseUp);

    document.addEventListener('mouseup', canvasOnMouseUpAnywhere);
    document.addEventListener('keyup', onEscapeKey);
  }

  /**
   * Handles what happen in the canvas
   */
  var paletteMoveListener = function paletteMoveListener() {
    if(dragInProgress) {
      // TODO dragging draw shape
    }
  };

  /**
   * What happens on mouseup event over canvas
   */
  var canvasOnMouseUp = function canvasOnMouseUp(mouseEvent) {
    if(dragInProgress && mouseEvent.button === 0) {
      var newShape = {
        x: mouseEvent.clientX - 90 / 2.5,
        y: mouseEvent.clientY - 90,
        width: 110,
        height: 110
      };
      canvas.addShape(newShape);
    }
    dragInProgress = false;
  };

  var canvasOnMouseUpAnywhere = function canvasOnMouseUpAnywhere() {
    dragInProgress = false;
  };

  var onEscapeKey = function(event) {
    if(event.keyCode === 27) {
      dragInProgress = false;
    }
  };


  /**
   * Must be called if a draggable button on palette is clicked
   * It is in the response of the palette to invoke this method.
   *
   * @return {boolean} true if dragStart was successful
   */
  var startDragAndDrop = function startDragAndDrop() {
    if(dragInProgress) {
      console.warn('Drag is still in progress');
      return false;
    }
    dragInProgress = true;
    return true;
  };

  /**
   * @return {boolean} returns the current dragging status.
   */
  var isDragInProgress = function isDragInProgress() {
     return isDragInProgress;
  };

  return {
    startDragAndDrop: startDragAndDrop,
    isDragInProgress: isDragInProgress
  };
}

Diagram.plugin('paletteDragDrop', ['canvas', 'eventBus', 'elementRegistry', PaletteDragDrop ]);

module.exports = PaletteDragDrop;